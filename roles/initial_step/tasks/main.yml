- name: Print all available facts
  ansible.builtin.debug:
    var: ansible_facts

- name: Run the equivalent of "apt-get update" as a separate step
  become: true
  apt:
    update_cache: yes

- name: Update all software
  become: true
  apt:
    name: "*"
    state: latest

- name: Remove dependencies that are no longer required
  become: true
  apt:
    autoremove: yes

- name: Install necessary software
  become: true
  apt:
    pkg:
      - git
      - ansible
      - openssh-server
      - vino
      - sane
      - vim
      - libvdpau-va-gl1

- name: Set default hostname
  become: true
  hostname:
    name: thin

- name: Replace conf string
  become: true
  replace:
    path: "{{ item.path }}"
    regexp: "{{ item.regex }}"
    replace: "{{ item.replace }}"
  loop:
    - { path: '/etc/cups/cups-browsed.conf', regex: 'BrowseRemoteProtocols dnssd cups', replace: 'BrowseRemoteProtocols none'}
    - { path: '/etc/avahi/avahi-daemon.conf', regex: 'use-ipv4=yes', replace: 'use-ipv4=no'}
    - { path: '/etc/avahi/avahi-daemon.conf', regex: 'use-ipv6=yes', replace: 'use-ipv6=no'}

- name: Restart services
  become: true
  systemd:
    name: "{{ item }}"
    state: restarted
  loop:
    - cups-browsed.service
    - avahi-daemon.service

- name: Dconf gnome-session-properties
  community.general.dconf:
    key: "{{ item }}"
    state: absent
  loop:
    - /org/gnome/desktop/notifications/application/gnome-session-properties
    - /org/gnome/desktop/notifications/application/org-gnome-calculator
    - /org/gnome/desktop/notifications/application/org-gnome-tweaks
    - /org/gnome/desktop/notifications/application/software-properties-gtk
    - /org/gnome/desktop/notifications/application/software-properties-livepatch
    - /org/gnome/desktop/screensaver

- name: Dconf gnome-session-properties org/gnome/desktop/notifications/application/gnome-session-properties
  community.general.dconf:
    key: "/org/gnome/desktop/notifications/application/gnome-session-properties"
    value: "true"

- name: Dconf vino /org/gnome/desktop/remote-access/require-encryption
  dconf:
    key: '/org/gnome/desktop/remote-access/require-encryption'
    value: "false"

- name: Dconf locksreen /org/gnome/desktop/session/idle-delay
  dconf:
    key: '/org/gnome/desktop/session/idle-delay'
    value: "uint32 0"

- name: Dconf disable notification /org/gnome/desktop/notifications/show-banners
  dconf:
    key: '/org/gnome/desktop/notifications/show-banners'
    value: "false"

- name: Dconf sharing org.gnome.settings-daemon.plugins.sharing.active
  dconf:
    key: '/org.gnome.settings-daemon.plugins.sharing.active'
    value: "true"

- name: Dconf vino server /org/gnome/desktop/remote-access/require-encription
  dconf:
    key: '/org/gnome/desktop/remote-access/require-encription'
    value: "false"

- name: Dconf vino server /org/gnome/desktop/remote-access/prompt-enabled
  dconf:
    key: '/org/gnome/desktop/remote-access/prompt-enabled'
    value: "false"

- name: Autologin for user
  become: true
  replace:
    path: /etc/gdm3/custom.conf
    regexp: "{{ item.regex }}"
    replace: "{{ item.replace }}"
  with_items:
  - "{{ regex: '# AutomaticLoginEnabled', replace: 'AutomaticLoginEnabled'}}"
  - "{{ regex: '# AutomaticLogin = user1', replace: 'AutomaticLogin = user'}}"

- name: Dconf vino server /org/gnome/desktop/remote-access/authentication-methods
  dconf:
    key: '/org/gnome/desktop/remote-access/authentication-methods'
    value: "['vnc']"

- name: Ask Vino password
  pause:
    prompt: "Inserire la password del server Vino"
  register: vino_password
  until: ( vino_password.user_input | length > 0 )

- name: Dconf vino server /org/gnome/desktop/remote-access/vnc-password
  dconf:
    key: '/org/gnome/desktop/remote-access/vnc-password'
    value: "'{{ vino_password.user_input | b64encode }}'"

- name: Copy user script
  copy:
    src: ../files/user.sh
    dest: ~/user.sh
    mode: u+rwx,g+r,o+r
  
# - name: Create .config/systemd/user directory if not exist
#   file:
#     path: ~/.config/systemd/user
#     state: directory 
#     recurse: yes
    
# - name: Copy start script
#   copy:
#     src: ../files/autorun_user.service
#     dest: ~/.config/systemd/user

# - name: Enable user start script
#   systemd:
#     name: autorun_user.service
#     scope: user
#     state: stoppped
#     enabled: yes

- name: Create .config/autostart
  file:
    path: ~/.config/autostart
    state: directory
    recurse: yes

- name: Copy autostart script
  copy:
    src: ../files/user.desktop
    dest: ~/.config/autostart

- name: Copy Picture directory
  copy:
    src: ../files/Picture
    dest: ~/.

- name: Get PC manufacturer
  become: true
  shell: dmidecode -s system-manufacturer
  register: pc_manufacturer

- name: Get PC model
  become: true
  shell: dmidecode -s system-product-name
  register: pc_model

- name: pc model
  debug:
   msg: "{{ pc_model }} {{ pc_manufacturer }}"

- name: add audio Combo jack for DELL pc
  lineinfile:
    path: /etc/modprobe.d/alsa-base.conf
    regex: "{{ item.regex }}"
    line: "{{ item.line }}"
  loop:
    - { regex: '^options snd-hda-intel model=dell-headset-multi$', line: 'options snd-hda-intel model=dell-headset-multi'}
  when: pc_manufacturer == 'DELL' and pc_model == ''
